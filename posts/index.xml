<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on @JvmName(&#34;Parth&#34;)</title>
        <link>https://jvmname.dev/posts/</link>
        <description>Recent content in Posts on @JvmName(&#34;Parth&#34;)</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 23 Jun 2020 16:42:26 -0700</lastBuildDate>
        <atom:link href="https://jvmname.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Static in Kotlin</title>
            <link>https://jvmname.dev/posts/2020/06/static-in-kotlin/</link>
            <pubDate>Tue, 23 Jun 2020 16:42:26 -0700</pubDate>
            
            <guid>https://jvmname.dev/posts/2020/06/static-in-kotlin/</guid>
            <description>ed. note: This blog post was written in June 2020, when Kotlin 1.3.72 was in production. It&amp;rsquo;s possible the Kotlin compiler has gotten smarter since then!
 My current company uses Kotlin for the backend services, so naturally we use the most standard of JVM logging setups: SLF4J + Logback.
From my old-timey Java days, I know that the idiomatic way to set up an SLF4J logger is like so:</description>
            <content type="html"><![CDATA[<hr>
<p><em>ed. note:</em> This blog post was written in June 2020, when Kotlin 1.3.72 was in production. It&rsquo;s possible the Kotlin compiler has gotten smarter since then!</p>
<hr>
<p>My <a href="https://www.hatchcard.com/">current company</a> uses Kotlin for the backend services, so naturally we use the most standard of JVM logging setups: <a href="http://www.slf4j.org/">SLF4J</a> + <a href="http://logback.qos.ch/">Logback</a>.</p>
<p>From my old-timey Java days, I know that the idiomatic way to set up an SLF4J logger is like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> <span style="color:#f92672">{</span> 
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Logger logger <span style="color:#f92672">=</span> LoggerFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getLogger</span><span style="color:#f92672">(</span>Direction<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
    
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">navigate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span> 
        logger<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(...)</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>But it&rsquo;s 2020, and we write Kotlin now 🎉 A few websites I found helpfully suggest the most basic-but-functional Kotlin version of this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> { 
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> LOG = LoggerFactory.getLogger(Direction<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>.java)
    
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">navigate</span>() { 
        LOG.info(<span style="color:#e6db74">&#34;println(TAG)&#34;</span>)
    }
}
</code></pre></div><p>But you&rsquo;ll note that this doesn&rsquo;t achieve the same result as our Java snippet; a glance at the generated Java reveals this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> <span style="color:#f92672">{</span>
   <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> Logger LOG <span style="color:#f92672">=</span> LoggerFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getLogger</span><span style="color:#f92672">(</span>Direction<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>

   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">navigate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">LOG</span><span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;println(TAG)&#34;</span><span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Yikes! Each new instance of <code>Direction</code> will spin up a new <code>LOG</code> as well, which can get expensive, if we&rsquo;re not careful.</p>
<p>This generalizes to a whole bunch of situations where we&rsquo;d prefer to have one instance of something available to a class. In Java, we&rsquo;d use <code>static</code> to solve this problem.</p>
<h2 id="automatic-static">Automatic Static</h2>
<p>Naturally, Kotlin doesn&rsquo;t have any <code>static</code> keywords. Nevertheless, from our encyclopedic knowledge of Kotlin reserved keywords, we know about <code>const</code>. If we combine that with a <code>companion object</code>, can we get what we want?</p>
<p>Actually, that doesn&rsquo;t help us with logging! According to <a href="https://kotlinlang.org/docs/reference/properties.html#compile-time-constants">the docs</a> (and the compiler!), there are two reasons this won&rsquo;t work:</p>
<ol>
<li><code>const</code> can only be used with values known at compile-time. (Alas, poor <code>Logger</code>, we can&rsquo;t know you early enough 😿)</li>
<li><code>Logger</code> isn&rsquo;t a primitive/String, and <code>const</code> only works with primitives</li>
</ol>
<p>That&rsquo;s fine, what if we remove the <code>const</code> - isn&rsquo;t a companion object basically like a Java <code>static final</code>?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> { 
    <span style="color:#66d9ef">companion</span> <span style="color:#66d9ef">object</span> {
        <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> LOG = LoggerFactory.getLogger(Direction<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>.java)
    }
    
    <span style="color:#66d9ef">public</span> void navigate() { 
        LOG.info(<span style="color:#e6db74">&#34;println(TAG)&#34;</span>)
    }
}

</code></pre></div><p>The Java we generate is roughly:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> <span style="color:#f92672">{</span>
   <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Logger LOG <span style="color:#f92672">=</span> LoggerFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getLogger</span><span style="color:#f92672">(</span>Direction<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Direction<span style="color:#f92672">.</span><span style="color:#a6e22e">Companion</span> Companion <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Direction<span style="color:#f92672">.</span><span style="color:#a6e22e">Companion</span><span style="color:#f92672">();</span>

   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">navigate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
      LOG<span style="color:#f92672">.</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;println(TAG)&#34;</span><span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>

   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Companion</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Companion</span><span style="color:#f92672">()</span> <span style="color:#f92672">{}</span>
   <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

</code></pre></div><p>Hey! That&rsquo;s not bad! Pretty efficient, and the extra <code>Companion</code> class doesn&rsquo;t really concern me much. On Android, R8 happily inline that (assuming you&rsquo;ve enabled the <a href="https://www.guardsquare.com/en/products/proguard/manual/usage#allowaccessmodification"><code>-accessmodification</code> flag</a>), and on other systems (e.g. backend), the JVM should inline that as well.</p>
<p>But I don&rsquo;t get paid to write pretty generated Java code, I get paid to write Kotlin. It&rsquo;s not a lot to type, but <code>companion object</code> with all those newlines can wear on you!</p>
<p>Well, what about a top-level declaration? Putting our <code>Logger</code> setup there will definitely make it <code>static</code>. Let&rsquo;s check it out!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> LOG = LoggerFactory.getLogger(Direction<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>.java)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> {
    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">navigate</span>() {
        LOG.info(<span style="color:#e6db74">&#34;println(TAG)&#34;</span>)
    }
}
</code></pre></div><p>Gives us:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DirectionKt</span> <span style="color:#f92672">{</span>
   <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Logger LOG <span style="color:#f92672">=</span> LoggerFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getLogger</span><span style="color:#f92672">(</span>Direction<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>

   <span style="color:#75715e">// $FF: synthetic method
</span><span style="color:#75715e"></span>   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> Logger <span style="color:#a6e22e">access$getLOG$p</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
      <span style="color:#66d9ef">return</span> LOG<span style="color:#f92672">;</span>
   <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Direction</span> <span style="color:#f92672">{</span>
   <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">navigate</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
      MyClassKt<span style="color:#f92672">.</span><span style="color:#a6e22e">access$getLOG$p</span><span style="color:#f92672">().</span><span style="color:#a6e22e">info</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;println(TAG)&#34;</span><span style="color:#f92672">);</span>
   <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>That synthetic accessor makes sense, since you&rsquo;re essentially calling another class&rsquo;s private field.</p>
<p>For folks who got into Kotlin but never wrote much Java, this generated code might be a bit surprising. But don&rsquo;t worry &ndash; the perf impact there is negligible; once again, R8 or JVM HotSpot will realistically inline that for you.</p>
<p>But is this really the end of the road? Can Kotlin really only be half as &ldquo;space-efficient&rdquo; as Java?</p>
<h2 id="whats-in-a-name">What&rsquo;s in a name?</h2>
<p>The problem here is that Kotlin seems to generate another <code>DirectionKt</code> class to warehouse the static elements - akin to a companion object. But what if there was a way to direct Kotlin to &ldquo;merge&rdquo; the <code>*Kt</code> class with the &ldquo;real&rdquo; class?</p>
<p>Perhaps <code>@JvmName</code> could save us from multiple classes? More specifically, prepending <code>@file:JvmName(&quot;Direction&quot;)</code> to our previous Kotlin snippet gives us:</p>
<p>&hellip; a compile error 💀</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">e: /Users/parth/.../Direction.kt: <span style="color:#f92672">(</span>1, 1<span style="color:#f92672">)</span>: Duplicate JVM class name <span style="color:#e6db74">&#39;Direction&#39;</span> generated from: 
package-fragment, Direction
</code></pre></div><p>(Fun fact: the IntelliJ IDEA 2020.2 EAP totally lets you put the <code>@file:JvmName</code> thing without showing you any lint or warnings)</p>
<p>Darn.</p>
<hr>
<h2 id="conclusions---how-to-be-static">Conclusions - how to be static</h2>
<p>But which is better? <code>companion</code> or top-level declaration?</p>
<p>From a perf/size perspective, you get the same bytecode generated for you, so they&rsquo;re the same.</p>
<p><del>Bikesheddingly</del> <strong>Personally, I prefer the top-level declaration.</strong> It&rsquo;s out-of-the-way, it&rsquo;s less to read, and least importantly, almost 20 fewer characters to type!</p>
<p>⚠️ There is one &ldquo;gotcha&rdquo; with a top-level declaration: You <em>must</em> mark the top-level <code>val</code> as <code>private</code>, or you could get into wacky situations where another class accidentally uses another class&rsquo;s <code>Logger</code> instance.
Have fun tracking down that logging bug! 🙀🐛</p>
<p>That being said, if you&rsquo;ve already got a <code>companion</code> for something, there&rsquo;s literally no reason you shouldn&rsquo;t put your <code>LOG</code> setup in there as well!</p>
<p>&hellip;Except for testability, but that&rsquo;s a blog post for another day.</p>
<p>Happy logging 🌲 (or whatever else you put in static members)!</p>
<hr>
<h2 id="references--extra-reading--sources">References | Extra Reading | Sources</h2>
<p>Many thanks to <a href="https://www.zacsweers.dev">Zac Sweers</a> for telling me &ldquo;you need to revise this&rdquo;, and <a href="https://publicobject.com/">Jesse Wilson</a> for pointing out that non-private top-level declarations can cause problems.</p>
<p>Also:</p>
<ul>
<li>Egor Andreevich - <a href="https://blog.egorand.me/where-do-i-put-my-constants-in-kotlin/">https://blog.egorand.me/where-do-i-put-my-constants-in-kotlin/</a></li>
<li>Christophe Beyls - <a href="https://medium.com/@BladeCoder/exploring-kotlins-hidden-costs-part-1-fbb9935d9b62">https://medium.com/@BladeCoder/exploring-kotlins-hidden-costs-part-1-fbb9935d9b62</a></li>
<li>Roman Elizarov (<a href="https://discuss.kotlinlang.org/t/what-is-the-advantage-of-companion-object-vs-static-keyword/4034/2">source</a>):
<blockquote>
<p>If you follow the style of writing the statics at the top of the class in Java, then I suggest to try to consider writing them <em>at the top level</em> (e.g. before class declaration) in Kotlin. For many use-cases it works better than introducing a <code>companion object.</code></p>
</blockquote>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>I Go, Hugo, They Go</title>
            <link>https://jvmname.dev/posts/2020/05/i-go-hugo-they-go/</link>
            <pubDate>Mon, 18 May 2020 08:39:55 -0700</pubDate>
            
            <guid>https://jvmname.dev/posts/2020/05/i-go-hugo-they-go/</guid>
            <description>A dump of my experiences getting this blog set up - from Hugo, to GitHub deploy, to Google Domain CNAME entries.
 Ed. note: I have no idea how Hugo is intended to be pronounced; it could be oo-go (á la Hugo Chavez), or hyoo-go, as the name is pronounced in American English. For the punning purposes of the title, I&amp;rsquo;m assuming it&amp;rsquo;s the latter pronunciation.
 This shouldn&amp;rsquo;t be so complicated.</description>
            <content type="html"><![CDATA[<p>A dump of my experiences getting this blog set up - from Hugo, to GitHub deploy, to Google Domain CNAME entries.</p>
<hr>
<p><strong>Ed. note:</strong> I have no idea how <code>Hugo</code> is intended to be pronounced; it could be <em><code>oo-go</code></em> (á la <em>Hugo Chavez</em>), or <em><code>hyoo-go</code></em>, as the name is pronounced in American English. For the punning purposes of the title, I&rsquo;m assuming it&rsquo;s the latter pronunciation.</p>
<hr>
<h3 id="this-shouldnt-be-so-complicated">This shouldn&rsquo;t be so complicated.</h3>
<p>Somehow, with all the resources online of how to get Hugo + GitHub Pages + Custom Domain set up, I still ran into strange, arcane hurdles.</p>
<p>Maybe this is because while I <em>technically</em> understand things like static site generators and DNS and CNAME, it&rsquo;s a far cry from actually understanding how to set something up <em>correctly</em>.</p>
<p><em>Plot twist:</em> I finally got everything configured correctly - proof: you&rsquo;re reading it now! 🧐</p>
<p>Here was my eventual setup:</p>
<ul>
<li>a <a href="https://domains.google/">Google Domains</a> listing for <code>jvmname.dev</code></li>
<li>a <code>CNAME</code> record in Google Domains pointing from <code>www.jvmname.dev</code> to <code>jvmname.github.io</code></li>
<li>an <code>A/ANAME</code> record in Google Domains pointing to the <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Github CDNs</a></li>
<li>a GitHub repo for the <strong>source</strong> files - e.g. <code>parth-blog-source</code></li>
<li>a GitHub Pages repo for the <strong>generated</strong> content.
<ul>
<li>This one should adhere to the GitHub Pages format: <code>&lt;ghuser&gt;.github.io</code>; for me, that&rsquo;s <code>jvmname.github.io</code></li>
</ul>
</li>
<li>a local Hugo installation</li>
</ul>
<p>Here&rsquo;s what you should do to achieve the same setup:</p>
<h1 id="step-1-get-your-domain">Step 1: Get your domain!</h1>
<p><a href="https://domains.google">domains.google</a> has lots of fun options, and since you&rsquo;re a developer, definitely consider a <code>*.dev</code> domain 👨🏽‍💻👩🏻‍💻</p>
<p>All <code>.dev</code> domains are <a href="https://domains.google/tld/security/">USD 12/year</a> (as of 05/2020). I suspect, for most people, that&rsquo;s relatively affordable. If that&rsquo;s the case for you, it might make sense to buy your domain ahead of time, just to stake your claim.</p>
<hr>
<h1 id="step-2-install-hugo">Step 2: Install Hugo</h1>
<p>Follow the well-written <a href="https://gohugo.io/getting-started/quick-start/">Hugo Quickstart Guide</a> with the following caveats:</p>
<h4 id="caveat-1-name-your-folder-better">Caveat 1: Name your folder better</h4>
<p><a href="https://gohugo.io/getting-started/quick-start/#step-2-create-a-new-site">Hugo Quickstart Step 2</a> suggests running <code>hugo new site quickstart</code>, but that will make a folder named <code>quickstart</code>, and that&rsquo;s not actually a useful name 🤦🏽‍♂️</p>
<p>You should use a name that makes sense to you!</p>
<ul>
<li><code>website-source</code></li>
<li><code>hugo-content</code></li>
<li><code>blog-source</code></li>
</ul>
<p>Literally anything! For the purposes of this guide, we&rsquo;re going to pretend you chose the name <code>blog-source</code>.</p>
<h4 id="caveat-2-customize-your-output-dir">Caveat 2: Customize your output dir</h4>
<p>By default, the <code>hugo</code> command will emit generated HTML in <code>blog-source/public</code>. Since we&rsquo;re planning on pushing the generated output to <code>&lt;ghuser&gt;.github.io</code>, let&rsquo;s define the output directory as that!</p>
<p>In your <code>config.toml</code> (or <code>yaml</code>/<code>json</code>), find the key <code>publishDir</code> and update it to:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"><span style="color:#a6e22e">publishDir</span>   = <span style="color:#e6db74">&#34;&lt;ghuser&gt;.github.io&#34;</span>
</code></pre></div><p><em>Note:</em> if it exists, you should <code>rm -r public</code>, since it&rsquo;s useless now. Don&rsquo;t worry, that whole folder is generated code, so you can blow it away with reckless abandon 💥</p>
<h4 id="caveat-3-choose-your-theme">Caveat 3: Choose your theme</h4>
<p>In general, I&rsquo;d recommend a theme that has an <code>exampleSite</code> directory in the theme&rsquo;s Github repo (e.g. <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng/tree/master/exampleSite"><code>hello-friend-ng/exampleSite/</code></a>).</p>
<p>This makes it drop-dead-simple to copy the config from <code>exampleSite/config.toml</code> to your top-level <code>config.toml</code>, as opposed to having to comb through documentation to find the necessary configuration parameters - ain&rsquo;t nobody got time for that!</p>
<hr>
<h1 id="step-3-set-up-your-source-repo">Step 3: Set up your source repo</h1>
<p>Ordinarily, you&rsquo;d want to set this up before anything else, but I&rsquo;ve seen reports online of Hugo complaining if the target directory already exists. So we create the <code>blog-source/</code> dir first, and then create the repo!</p>
<ol>
<li>in your local <code>blog-source/</code> directory, run <code>git init</code> to create a new local Git repo</li>
<li>go through your standard <em>&ldquo;create a new repository&rdquo;</em> flow on GitHub</li>
<li>finally, add the remote origin to your local repo: <div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> git remote add origin git@github.com:&lt;ghuser&gt;/blog-source.git </code></pre></div></li>
</ol>
<p>If you like, you can do a quick test to make sure everything works as expected:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git add .
git commit -am <span style="color:#e6db74">&#34;initial commit&#34;</span>
git push origin master</code></pre></div>
<hr>
<h1 id="step-4-write-revise-repeat">Step 4: Write, Revise, Repeat</h1>
<p>Time to flex your literary muscles! Write a blog post or two - something you learned at work or on a side project. Maybe you just took a vacation and you&rsquo;ve got some cool photos to turn into a photo essay? Doesn&rsquo;t matter, just be creative ⚡️</p>
<p>Some useful learnings distilled from my experience creating content through Hugo:</p>
<h4 id="images-and-hugo-shortcodes">Images and Hugo Shortcodes</h4>
<p>Hugo defines some <a href="https://gohugo.io/content-management/shortcodes/">markdown-friendly shortcodes</a>. which, oestensibly, is easier than hand-coding HTML.</p>
<p>I&rsquo;ve found the <code>figure</code> shortcode to be useful for just chucking images into your markdown files:</p>
<pre><code>{{&lt; figure src=&quot;/img/spf13.jpg&quot; title=&quot;Steve Francia&quot; &gt;}}
</code></pre><p>It works for content placed into the <code>/static/*</code> dir, as well as any web content:</p>
<pre><code>{{&lt; figure src=&quot;https://images.unsplash.com/photo-1474667689933-0ff72b3d16e9&quot; 
title=&quot;Suspended Cups&quot; 
attr=&quot;[Chris Scott](https://unsplash.com/photos/NEc3YEN1FFw)&quot; &gt;}}
</code></pre><p>I don&rsquo;t write HTML for a living, so, to me, this feels easier than having to read the W3C spec to learn how the <code>&lt;figure&gt;</code> tag works.</p>
<p><em>Note:</em> if you want to do more heavy-weight processing at &ldquo;compile-time&rdquo;, <a href="https://laurakalbag.com/processing-responsive-images-with-hugo/">Laura Kalbag has a great blog post</a> on image processing.</p>
<h4 id="content-directories">Content Directories</h4>
<p>AKA <a href="https://gohugo.io/content-management/page-bundles/"><em>page bundles</em> </a> in Hugo parlance. They&rsquo;re all arbitrary names, and most themes will have some pre-defined top-level pages in the <code>config.toml</code>. For the theme I use, <code>hello-friend-ng</code>, the defaults were:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">menu</span>]
  [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
    <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;about&#34;</span>
    <span style="color:#a6e22e">name</span>       = <span style="color:#e6db74">&#34;About&#34;</span>
    <span style="color:#a6e22e">url</span>        = <span style="color:#e6db74">&#34;about/&#34;</span>
  [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
    <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;posts&#34;</span>
    <span style="color:#a6e22e">name</span>       = <span style="color:#e6db74">&#34;Posts&#34;</span>
    <span style="color:#a6e22e">url</span>        = <span style="color:#e6db74">&#34;posts/&#34;</span>
</code></pre></div><p>Feel free to change these names or URLs to match your preferences. For example, this is my <code>config.toml</code>&rsquo;s menu settings (as of 05/2020):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">menu</span>]
 [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
    <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;posts&#34;</span>
    <span style="color:#a6e22e">name</span>       = <span style="color:#e6db74">&#34;Posts&#34;</span>
    <span style="color:#a6e22e">url</span>        = <span style="color:#e6db74">&#34;posts/&#34;</span>
  [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
    <span style="color:#a6e22e">identifier</span>  = <span style="color:#e6db74">&#34;speaking&#34;</span>
    <span style="color:#a6e22e">name</span>        = <span style="color:#e6db74">&#34;Speaking&#34;</span>
    <span style="color:#a6e22e">url</span>         = <span style="color:#e6db74">&#34;speaking/&#34;</span>
  [[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
    <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;about&#34;</span>
    <span style="color:#a6e22e">name</span>       = <span style="color:#e6db74">&#34;Me&#34;</span>
    <span style="color:#a6e22e">url</span>        = <span style="color:#e6db74">&#34;about/&#34;</span>
</code></pre></div><p>⚠️⚠️ If you change the <code>url</code>s for any menu items, just make sure you rename the directory in <code>content/</code> as well - e.g. <code>mv content/posts content/blog</code>.</p>
<hr>
<h2 id="step-5-create-github-pages-repo--submodule">Step 5: Create GitHub Pages Repo + Submodule</h2>
<ol>
<li><strong>Double-check your Hugo config</strong> - At this point, we haven&rsquo;t set up the DNS infra to support any custom domains, so let&rsquo;s double-check that our main <code>config.toml</code> is using the &ldquo;boring&rdquo; Github-pages base URL:
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"> <span style="color:#a6e22e">baseURL</span>     = <span style="color:#e6db74">&#34;&lt;ghuser&gt;.github.io&#34;</span>    </code></pre></div></li>
<li><strong>Create the GH Page repo</strong> - follow the steps on <a href="https://help.github.com/en/github/working-with-github-pages/creating-a-github-pages-site">Creating a GitHub Pages site article</a>.</li>
<li><strong>Clone the repo locally</strong> - <code>git clone git@github.com:&lt;ghuser&gt;/&lt;ghuser&gt;.github.io.git</code></li>
<li><strong>Link repo as submodule</strong> - In your <strong>blog-sources/</strong> repo, create a submodule link to your GH-page repo:
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> git submodule add git@github.com:&lt;ghuser&gt;/&lt;ghuser&gt;.github.io.git </code></pre></div></li>
<li><strong>Kick the tires</strong> - Now that you have a submodule link inside <code>blog-sources/</code>, let&rsquo;s make some commits to make sure everything got hooked up properly on your machine:
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># in blog-sources</span>
git add .
git commit -am <span style="color:#e6db74">&#34;committing Hugo content sources&#34;</span> <span style="color:#75715e">#&#34;outer&#34; commit</span>
git push origin master <span style="color:#75715e"># push the sources to `blog-sources`</span>

hugo <span style="color:#75715e">#generate the HTML from our sources</span>

cd &lt;ghuser&gt;.github.io <span style="color:#75715e"># now we&#39;re inside the submodule</span>
git add .
git commit -am <span style="color:#e6db74">&#34;committing Hugo generated HTML&#34;</span> <span style="color:#75715e">#&#34;inner&#34; commit</span>
git push origin master <span style="color:#75715e"># push the generated content to &lt;ghuser&gt;.github.io</span></code></pre></div></li>
<li>If all is right with the world, if you go to the GitHub page for <code>blog-sources</code>, you should see your &ldquo;outer&rdquo; commit; ditto for your <code>&lt;ghuser&gt;.github.io</code> repo.</li>
</ol>
<p>In fact, wait about 5 minutes for GitHub to build+deploy&hellip;and then if you navigate to <code>www.&lt;ghuser&gt;.github.io</code>, you should see your website! 🎉🎉</p>
<p>But we&rsquo;re not done yet.</p>
<hr>
<h2 id="step-6-deployment">Step 6: Deployment</h2>
<p>I stole this script in totality from <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Hugo: Host on GitHub</a>. It&rsquo;s useful, if only because it allows us to build+commit+push to GitHub in one line.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
set -e <span style="color:#75715e"># If a command fails then the deploy stops</span>

printf <span style="color:#e6db74">&#34;\033[0;32mDeploying updates to GitHub...\033[0m\n&#34;</span>

hugo <span style="color:#75715e"># Build the project.</span>

cd &lt;ghuser&gt;.github.io <span style="color:#75715e"># Go to generated output folder</span>

git add . <span style="color:#75715e"># Add changes to git.</span>

msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rebuilding site </span><span style="color:#66d9ef">$(</span>date<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -n <span style="color:#e6db74">&#34;</span>$*<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$*<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>
git commit -m <span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74">&#34;</span> <span style="color:#75715e"># Commit changes.</span>

git push origin master <span style="color:#75715e"># Push source and build repos.</span>
</code></pre></div><p>Assuming you put it in a file <code>deploy.sh</code>, you&rsquo;d use it from <code>blog-sources/</code> as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./deploy.sh <span style="color:#e6db74">&#34;my optional commit message&#34;</span>
</code></pre></div><p>A few notes:</p>
<ul>
<li>this script &ldquo;fails fast&rdquo;: e.g., it will not push to <code>master</code> if there&rsquo;s no staged changes to commit, even if there are other commits that could be pushed</li>
<li>this script leaves you in the <code>&lt;ghuser&gt;.github.io</code> submodule</li>
<li>⚠️ this script <strong>does not</strong> stage/commit changes in the main <code>blog-sources</code> repository</li>
</ul>
<hr>
<h2 id="step-7-configure-custom-domain--setup-dns">Step 7: Configure Custom Domain + Setup DNS</h2>
<p>So close to the end! For this section, I&rsquo;m assuming your custom domain is <code>example.dev</code>.</p>
<h4 id="71-google-domains-config">7.1: Google Domains Config</h4>
<p>Here&rsquo;s what you&rsquo;ll need to do:</p>
<ol>
<li>
<p>create a <a href="https://dnsmadeeasy.com/services/anamerecords/"><code>CNAME</code> entry</a> to alias <code>www.example.dev</code> &ndash;&gt; <code>&lt;ghuser&gt;.github.io</code></p>
<p>⚠️ <strong>the <code>www.</code> is crucial</strong>; without it, your users' browsers won&rsquo;t be redirected from <code>www.example.dev</code> to <code>example.dev</code></p>
</li>
<li>
<p>create an <a href="https://dnsmadeeasy.com/services/anamerecords/"><code>A/ANAME</code> record</a> to alias <code>example.dev</code> &ndash;&gt; <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">GitHub Pages CDN</a> (~equivalent to <code>&lt;ghuser&gt;.github.io</code>).</p>
<p>At the time of this writing (05/2020), the four IP addresses you&rsquo;ll need to alias are:</p>
<pre><code>185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
</code></pre></li>
</ol>
<p>This post is long enough, and I&rsquo;ll be honest, I don&rsquo;t <em>fully</em> understand the difference between <code>example.dev</code> and <code>www.example.dev</code>, so I&rsquo;ll leave that to someobody else to explain. All I know is that I ended up needing both 🤷🏾‍♂️</p>
<p>There&rsquo;s 2 things that weren&rsquo;t apparent to me when configuring this in Google Domains:</p>
<ol>
<li>the <code>CNAME</code> record setup accepts <code>www.example.dev</code> and then converts it to <code>www</code>.
<strong>This is okay, and is expected.</strong></li>
<li>the <code>ANAME</code> (just <code>A</code> in the config page) will not accept <code>example.dev</code>, you&rsquo;ll have to put <code>@</code>.
<strong>This is okay, and is expected.</strong></li>
</ol>
<p>Besides that convolution (I&rsquo;m sure that decision made sense to <em>someone</em>) the Google Domains page is pretty straightforward, but just to check your work, this is what my config looks like (as of 05/2020):
<figure>
    <img src="/img/google-domain-setup.png"/> 
</figure>
</p>
<p>⚠️ Note: I did this while I was based in Arizona (US west coast), and so probably experienced very fast propagation times from Google&rsquo;s DNS servers ⚡️. Google claims that propagating these changes can take up to 48 hours; if things aren&rsquo;t working, but you&rsquo;re 115% sure that you typed everything in correctly, come back in a day and try again.</p>
<h4 id="72-hugogithub-config">7.2: Hugo/GitHub Config</h4>
<p>Here, we&rsquo;ll be telling Hugo and GitHub what URL to use.</p>
<p>You&rsquo;ll need to update the <code>baseURL</code> in the <code>config.toml</code> file to point to your fancy new domain:
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"> <span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#34;https://example.dev&#34;</span>    </code></pre></div></p>
<p>Additionally, GitHub requires a little config file to be at the top-level of the <code>*.github.io</code> repo so its CDN knows how to generate the redirects. Instead of checking this file into the repo directly, let&rsquo;s put it in the <strong>sources</strong> repo, so we can be assured it&rsquo;ll always be copied over when we generate a new website:</p>
<p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd static  <span style="color:#75715e">#in blog-sources/</span>
touch CNAME
echo example.dev &gt; CNAME</code></pre></div>
(from the <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain">Hugo Docs</a>)</p>
<p>Fun fact, this is the same file that&rsquo;s generated if you go to your Github repo settings -&gt; <strong>Github Pages</strong> -&gt; <strong>Custom domain</strong> -&gt; and enter <code>example.dev</code></p>
<p>At this point, run <code>./deploy.sh</code>, then go to your repo settings for <code>&lt;ghuser&gt;.github.io</code>, find the section called <strong>GitHub Pages</strong>, and enable <code>✅ Enforce HTTPS</code>.</p>
<hr>
<h2 id="step-8-the-waiting-game">Step 8: The waiting game</h2>
<p>That&rsquo;s all the &ldquo;work&rdquo; you have to do! Clicking the HTTPS box in your settings will kick off a bunch of automated processes on GitHub&rsquo;s side to set up the correct certificate chains using Let&rsquo;s Encrypt.</p>
<p>This is necessary because <a href="https://domains.google/tld/security/">Google Domains <em>requires</em> all traffic</a> to your <code>(www.)example.dev</code> domain(s) to be encrypted by way of <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security#HSTS_mechanism_overview"><strong>H</strong>TTP <strong>S</strong>trict <strong>T</strong>ransport <strong>S</strong>ecurity (HSTS)</a>. If you tried to navigate to <code>http://example.dev</code> <em>without</em> GitHub&rsquo;s cert chain set up, you would get an error like this:</p>
<figure><a href="https://i.stack.imgur.com/83l43.png">
    <img src="https://i.stack.imgur.com/83l43.png" width="450"/> </a>
</figure>

<p>In my experience, I had to play the waiting game for ~2 hours; depending on your location and whatever service worker load GitHub is experiencing at the moment, it might take more or less time to get your HTTPS cert set up. <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">GitHub claims</a> it can take up for 24 hours for the HTTPS option to even be <em>available</em> ⏳</p>
<h2 id="step-9-success-">Step 9: Success 🎉</h2>
<p>At some point, the HTTPS certificate gods will smile upon you, and your GitHub Page will have an HTTPS certificate. You&rsquo;ll know that the gods have accepted your blood-offering because you&rsquo;ll see a little green banner in your GitHub repo <code>&lt;ghuser&gt;.github.io</code> settings like this:</p>
<figure>
    <img src="/img/gh-page-published.png"/> 
</figure>

<p>That&rsquo;s the ballgame! Everything should look and work exactly as when you run <code>hugo server</code>!</p>
<p>Feel free to test out all the various combinations to get to your website:</p>
<ul>
<li><a href="http://www.example.dev">www.example.dev</a></li>
<li><a href="http://example.dev">http://example.dev</a></li>
<li><a href="http://www.example.dev">http://www.example.dev</a></li>
<li><a href="http://example.dev">example.dev</a></li>
<li><a href="https://example.dev">https://example.dev</a></li>
</ul>
<p>All of these should resolve to <code>https://example.dev</code>. If not, Check your DNS settings in Google Domains, and also maybe your CNAME file in your <code>blog-sources</code> project.</p>
<hr>
<p>Thanks for reading along! Hopefully this guide helps someone, or it makes you realize that you could pay <a href="https://ghost.org">Ghost</a> $30/mo to avoid this hassle 😅</p>
<hr>
<h2 id="references--sources--extra-reading">References | Sources | Extra Reading</h2>
<ol>
<li>Hugo - Hosting on GitHub: <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain">https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain</a></li>
<li>GitHub - Managing a custom domain for your GitHub Pages site: <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain</a></li>
<li>Creating and deploying your first Hugo site to Github pages: <a href="https://inside.getambassador.com/creating-and-deploying-your-first-hugo-site-to-github-pages-1e1f496cf88d">https://inside.getambassador.com/creating-and-deploying-your-first-hugo-site-to-github-pages-1e1f496cf88d</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Tracking Performance in Kotlin Suspending Functions</title>
            <link>https://jvmname.dev/posts/2020/03/tracking-performance-in-kotlin-suspending-functions/</link>
            <pubDate>Sun, 29 Mar 2020 23:14:00 -0700</pubDate>
            
            <guid>https://jvmname.dev/posts/2020/03/tracking-performance-in-kotlin-suspending-functions/</guid>
            <description>Suspended CupsChris Scott
  Using Firebase Performance Monitoring to track the performance of a plain-ol’ function (Java or Kotlin) is drop-dead simple using the @AddTrace annotation: @AddTrace(&amp;#34;some-trace-name&amp;#34;) fun myBoringFunction() { println(&amp;#34;nothing to see here!&amp;#34;) }
Wait a few moments, and you’ll see some-trace-name in the Firebase Console!
But what if you want to track the performance of a suspend function? Unfortunately, this is not as straightforward.
Attempt #1: Suspending Disbelief Let’s say you have some uncomplicated suspending function, like so:</description>
            <content type="html"><![CDATA[<figure>
    <img src="https://images.unsplash.com/photo-1474667689933-0ff72b3d16e9?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=810&amp;q=80"/> <figcaption>
            <h4>Suspended Cups</h4><p><a href="https://unsplash.com/photos/NEc3YEN1FFw">Chris Scott</a></p>
        </figcaption>
</figure>

<p>Using <a href="https://firebase.google.com/docs/perf-mon/get-started-android">Firebase Performance Monitoring</a> to track the performance of a plain-ol’ function (Java or Kotlin) is drop-dead simple using the <a href="https://firebase.google.com/docs/perf-mon/custom_traces-metrics?platform=android#add-trace-annotation">@AddTrace annotation</a>:
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#a6e22e">@AddTrace</span>(<span style="color:#e6db74">&#34;some-trace-name&#34;</span>)
<span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myBoringFunction</span>() {
    println(<span style="color:#e6db74">&#34;nothing to see here!&#34;</span>)
}</code></pre></div></p>
<p>Wait a few moments, and you’ll see <code>some-trace-name</code> in the Firebase Console!</p>
<p>But what if you want to track the performance of a <code>suspend</code> function? Unfortunately, this is not as straightforward.</p>
<h2 id="attempt-1-suspending-disbelief">Attempt #1: Suspending Disbelief</h2>
<p>Let’s say you have some uncomplicated suspending function, like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">suspend</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myAsyncFunction</span>() : Int {
    <span style="color:#66d9ef">val</span> result = <span style="color:#ae81ff">1</span> + <span style="color:#ae81ff">1</span>
    delay(<span style="color:#ae81ff">100L</span>)   
    println(<span style="color:#e6db74">&#34;something to see here: </span><span style="color:#e6db74">$result</span><span style="color:#e6db74">&#34;</span>)
    <span style="color:#66d9ef">return</span> result
}
</code></pre></div><p>A naive attempt to track this function’s performance would, as you might expect, to use <code>@AddTrace</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#a6e22e">@AddTrace</span>(<span style="color:#e6db74">&#34;some-other-trace-name&#34;</span>)
<span style="color:#66d9ef">suspend</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myAsyncFunction</span>() : Int { <span style="color:#f92672">..</span>. }
</code></pre></div><p>Just eyeballing it, it should work, right? Even if you compile, the <code>firebase-perf</code> Gradle plugin won’t complain, and the Firebase Performance Monitoring library won’t crash your app. So maybe everything will Just Work? 🤞🏽</p>
<p><strong>Plot Twist: it won’t work.</strong></p>
<p>To understand <em>why</em> it doesn’t work, you’ll need to understand two things:</p>
<ol>
<li>how the Kotlin compiler produces a suspending state machine</li>
<li>how the <code>firebase-perf</code> Gradle plugin instruments the <code>@AddTrace</code> annotation into an actual Trace invocation</li>
</ol>
<p>For #1, <a href="https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f">Manuel Vivo has a great article</a> going into the nuts and bolts of what the suspend keyword actually <em>means</em>, and if you’re not familiar with the process, I recommend checking it out.
For our purposes, we’ll simplify, and say that the Kotlin compiler will rewrite your <code>suspend</code> method signature, appending a <code>Continuation&lt;T&gt;</code> parameter, which allows it to build the state machine.</p>
<p>For #2, I don’t work at Google, so I’m not entirely sure how the <code>@AddTrace</code> instrumentation works under the hood. But I’ve got some guesses!</p>
<p>Let’s take our previous example and “compile” it. We’ll make 3 changes:</p>
<ol>
<li>simplify the “guts” of the coroutine state machine</li>
<li>add some “fake” Perf traces</li>
<li>“decompile” everything into Kotlin source code, because nobody wants to read Kotlin JVM bytecode!</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myAsyncFun</span>(cont : Continuation){
    <span style="color:#66d9ef">val</span> perf = FirebasePerformance.getInstance()
    <span style="color:#66d9ef">val</span> trace = perf.newTrace(<span style="color:#e6db74">&#34;some-other-trace-name&#34;</span>)
    trace.start()

    <span style="color:#66d9ef">val</span> result = <span style="color:#ae81ff">1</span> + <span style="color:#ae81ff">1</span>
    
    <span style="color:#75715e">//begin: coroutine state machine
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">when</span>(cont.label){
        <span style="color:#ae81ff">0</span> <span style="color:#f92672">-&gt;</span> {
            <span style="color:#75715e">//will call myAsyncFun with cont.label=1
</span><span style="color:#75715e"></span>            DelayKt.delay(<span style="color:#ae81ff">100</span>, cont) 
        }
        <span style="color:#ae81ff">1</span> <span style="color:#f92672">-&gt;</span> {
            println(<span style="color:#e6db74">&#34;something to see here: </span><span style="color:#e6db74">$result</span><span style="color:#e6db74">&#34;</span>)
            <span style="color:#75715e">//hands control+result back to caller
</span><span style="color:#75715e"></span>            cont.resume(result, <span style="color:#f92672">..</span>.) 
        }
    }
    <span style="color:#75715e">//end: coroutine state machine
</span><span style="color:#75715e"></span>    
    trace.end()
}
</code></pre></div><p>The coroutine’s state machine is muddying the waters — it’s no wonder Firebase’s automated instrumentation can’t figure out where to put the <code>trace.end()</code>! What’s a performance-minded developer to do?</p>
<h2 id="attempt-2-if-you-try-finally-youll-succeed">Attempt #2: If you Try, Finally you’ll succeed</h2>
<p>The heart of the issue is that the Firebase performance instrumentation can’t query suspending Kotlin bytecode for the method entry and exit.
But, as developers, <em>we</em> know when a suspending function will enter and exit; in fact, there’s even a Java/Kotlin paradigm to codifies this: <code>try/finally</code></p>
<p><code>try/finally</code> is exactly what we need: no matter what happens inside a method body, finally will always be executed last (or, finally!) — this is a guarantee from the JVM, and you can see this reflected in any compiled Java/Kotlin bytecode. <a href="https://blog.jamesdbloom.com/JavaCodeToByteCode_PartTwo.html#try_catch_finally">Read more here</a></p>
<p>Armed with this knowledge, and a little bit of Kotlin magic✨, we can write a little wrapper that can be used anywhere:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">fun</span> &lt;<span style="color:#a6e22e">E</span>&gt; <span style="color:#a6e22e">trace</span>(name : String, block: (Trace) <span style="color:#f92672">-&gt;</span> E): E {
    <span style="color:#66d9ef">val</span> trace = startTrace(name) <span style="color:#75715e">//creates &amp; starts a new Trace
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">try</span> {
        block(trace)
    } <span style="color:#66d9ef">finally</span> {
        trace.stop()
    }
}
</code></pre></div><p>Breaking it down:</p>
<ul>
<li>the <code>inline</code> keyword means we won’t interfere with any coroutine state machine; the entire suspending invocation will occur in the <code>try {}</code> block</li>
<li><code>startTrace</code> just invokes FirebasePerformance, names the trace, and starts it.</li>
<li>we accept a <code>block: (Trace) -&gt; E</code>, so that the instrumented code can append information to the Trace, if needed</li>
<li>in the <code>finally</code> block, we stop the trace, and return value produced by block</li>
<li>any exceptions are propagated to the calling code, since there’s no <code>catch</code> defined</li>
</ul>
<p>Sweet; simple; and, most importantly, it works!</p>
<p>Let’s rewrite our first suspending function using our new toy:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">suspend</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myAsyncFunction</span>() : Int {
    <span style="color:#66d9ef">val</span> result = <span style="color:#ae81ff">1</span> + <span style="color:#ae81ff">1</span>
    delay(<span style="color:#ae81ff">100L</span>)   
    println(<span style="color:#e6db74">&#34;something to see here: </span><span style="color:#e6db74">$result</span><span style="color:#e6db74">&#34;</span>)
    <span style="color:#66d9ef">return</span> result
}
</code></pre></div><p>becomes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">suspend</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myAsyncFunction</span>() : Int {
    <span style="color:#66d9ef">return</span> trace(<span style="color:#e6db74">&#34;some-other-trace&#34;</span>) {
        <span style="color:#66d9ef">val</span> result = <span style="color:#ae81ff">1</span> + <span style="color:#ae81ff">1</span>
        delay(<span style="color:#ae81ff">100L</span>)   
        println(<span style="color:#e6db74">&#34;something to see here: </span><span style="color:#e6db74">$result</span><span style="color:#e6db74">&#34;</span>)
        <span style="color:#66d9ef">return</span><span style="color:#a6e22e">@trace</span> result
    }
}
</code></pre></div><p>This is our solution! If you want to achieve this same result without nesting your method into a lambda, you can push it into a private function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">suspend</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">myAsyncFunction</span>() {
    <span style="color:#66d9ef">return</span> trace(<span style="color:#e6db74">&#34;some-other-trace&#34;</span>) { _myAsyncFunction() }
}

<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">suspend</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">_myAsyncFunction</span>() : Int {
    <span style="color:#66d9ef">val</span> result = <span style="color:#ae81ff">1</span> + <span style="color:#ae81ff">1</span>
    delay(<span style="color:#ae81ff">100L</span>)   
    println(<span style="color:#e6db74">&#34;something to see here: </span><span style="color:#e6db74">$result</span><span style="color:#e6db74">&#34;</span>)
    <span style="color:#66d9ef">return</span> result
}
</code></pre></div><p>The Firebase Performance Monitoring Console will now show the total time <code>myAsyncFunction</code> runs, including the time that any actual suspension takes 🎉</p>
<p>Happy coding!</p>
<h2 id="next-steps">Next Steps</h2>
<p>I’ve filed a feature request with Firebase to augment <code>@AddTrace</code> to support suspending functions. Let’s see what happens, maybe this blog post will be obsolete in 6 months 👀</p>
<p><em>Thanks to <a href="https://twitter.com/Akshay_Chordiya">Akshay Chordiya</a> and <a href="https://twitter.com/CodingDoug">Doug Stevenson</a> for reviewing the early drafts!</em> 🙏🏾</p>
<h2 id="sources--extra-reading">Sources | Extra Reading</h2>
<ol>
<li>
<p>The suspend modifier - Under the hood: <a href="https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f">https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f</a></p>
</li>
<li>
<p>Java Code to Byte Code - Part 2: <a href="https://blog.jamesdbloom.com/JavaCodeToByteCode_PartTwo.html#try_catch_finally">https://blog.jamesdbloom.com/JavaCodeToByteCode_PartTwo.html#try_catch_finally</a></p>
</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
