<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on @JvmName(&#34;Parth&#34;)</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on @JvmName(&#34;Parth&#34;)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Thu, 24 Jun 2021 16:09:41 -0400</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Your YAML could be DRYer</title>
            <link>http://localhost:1313/posts/2021/06/your-yaml-could-be-dryer/</link>
            <pubDate>Thu, 24 Jun 2021 16:09:41 -0400</pubDate>
            
            <guid>http://localhost:1313/posts/2021/06/your-yaml-could-be-dryer/</guid>
            <description>Github Actions are the go-to continuous integration tool for plenty of reasons - chief among them: first-party support with Github, pretty decent performance, and relatively cheap runner instances.
However, one place Github Actions has fallen short relative to other YAML-based players in the space (namely CircleCI) has been the inability to DRY up the YAML config files.
However, with a cool new 1 feature called Composite Run Steps, your repeated shell script invocations can now happily live in a separate YAML file!</description>
            <content type="html"><![CDATA[<p>Github Actions are the go-to continuous integration tool for plenty of reasons - chief among them: first-party support with Github, pretty decent performance, and relatively cheap runner instances.</p>
<p>However, one place Github Actions has fallen short relative to other YAML-based players in the space (namely CircleCI) has been the inability to <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> up the YAML config files.</p>
<p>However, with a cool new <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> feature called Composite Run Steps, your repeated shell script invocations can now happily live in a separate YAML file!</p>
<h2 id="dont-read-the-docs">Don&rsquo;t read the docs</h2>
<p>The documentation for Composite Run Steps (linked at the bottom) are great, but they make the <em>terrible</em> assumption that you want to create a whole different repository for your composite action.</p>
<p>If that&rsquo;s your use-case, great! Otherwise, I&rsquo;m guessing the far more common use-case is to warehouse code, workflow files, <em>and</em> composite action files in the same repository!</p>
<p>Fortunately, this is possible, the solution just is buried in a <a href="https://github.community/t/path-to-action-in-the-same-repository-as-workflow/16952/7">Github Community link</a> instead of being plainly available in <strong>big bold letters</strong> at the top of the Github&rsquo;s documentation.</p>
<h2 id="3-steps-to-dryer-yaml">3 Steps to DRYer YAML</h2>
<ol>
<li>
<p>Go through <a href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-run-steps-action">the official docs</a> for creating a Composite Run Step Action, except <strong>ignore everything about creating a new repository</strong> ‚Äî just name your action metadata file as <code>/.github/actions/my-action-name/action.yml</code></p>
<p>As you&rsquo;ll see in a moment, the <code>my-action-name</code> is important, since that&rsquo;s how you&rsquo;ll reference your action. It can be anything that&rsquo;s legal as a file-path.</p>
</li>
<li>
<p>In your actual Workflow yaml file, replace your repeated shell scripts with the following line; for example:</p>
<pre><code class="language-diff">- - run: sudo apt-get install androidsdk
- - run: alias sdkmanager=&quot;androidsdk&quot;  
- - name: Update Android Deps
-   run: sdkmanager &quot;build-tools;31.0.0-rc5&quot; &quot;platform-tools&quot; &quot;platforms;android-30&quot; &quot;cmdline-tools;latest&quot; &quot;extras;android;m2repository&quot; &quot;extras;google;m2repository&quot; --verbose   
-   env:  
-     ANDROID_SDK_ROOT: /opt/android/sdk
+ - uses: ./.github/actions/my-action-name
</code></pre>
</li>
<li>
<p>Revel in your victory; your workflow files are just a wee bit smaller! üéâ</p>
</li>
</ol>
<p>If you&rsquo;re a visual person, your file heirarchy should look like this:</p>
<pre><code>repo-root/
‚îú‚îÄ‚îÄ.github/
‚îÇ   ‚îú‚îÄ‚îÄactions/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄmy-android-action/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄaction.yml
‚îÇ   ‚îî‚îÄ‚îÄworkflows/
‚îÇ       ‚îî‚îÄ‚îÄworkflow.yml
‚îî‚îÄ‚îÄ:app
</code></pre>
<p>In my case, across 2 workflow files, I converted 40 lines of YAML to 14 lines, with the benefit of better maintainability moving forward.</p>
<h2 id="limitations">Limitations</h2>
<p>As of this writing (06/2021) Composite Run Step Actions don&rsquo;t support <em>importing other actions</em> &ndash; meaning you&rsquo;ll have to do anything involving a <code>uses</code> statement the old-fashioned way, for now<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<pre><code class="language-yaml">- name: Build App
  uses: eskatos/gradle-command-action@v1
  id: gradle
  with:
    wrapper-cache-enabled: true
    dependencies-cache-enabled: true
    configuration-cache-enabled: true
    arguments: :app:assembleDebug --scan
</code></pre>
<p>Composite Run Actions also don&rsquo;t support conditionals, timeouts, referencing secrets, and a few other things. The <a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-run-steps-actions">Metadata Syntax doc</a> has the full enumeration of allowable items; everything else is unsupported.</p>
<h2 id="wrap-up">Wrap-up</h2>
<p>What did I miss? Is there some super-secret way to reuse YAML I don&rsquo;t know about?</p>
<p>Send me a note at <a href="https://twitter.com/jvmname">@JvmName</a>!</p>
<h4 id="linksreferences">Links/References</h4>
<ol>
<li>
<p>Github&rsquo;s Composite Run Steps docs</p>
<p><a href="https://docs.github.com/en/actions/creating-actions/creating-a-composite-run-steps-action">https://docs.github.com/en/actions/creating-actions/creating-a-composite-run-steps-action</a></p>
</li>
<li>
<p>Metadata Syntax Doc:</p>
<p><a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-run-steps-actions">https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-run-steps-actions</a></p>
</li>
<li>
<p><em>GitHub Composite Actions - STOP wasting your time and create reusable actions</em> <br>
<a href="https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l">https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l</a></p>
</li>
<li>
<p>Github Community</p>
<p><a href="https://github.community/t/path-to-action-in-the-same-repository-as-workflow/16952/7">https://github.community/t/path-to-action-in-the-same-repository-as-workflow/16952/7</a></p>
</li>
</ol>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>&ldquo;New&rdquo; meaning &ldquo;I just discovered it yesterday&rdquo;; I have no idea how long it&rsquo;s been out.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>It looks like Github has an <a href="https://github.com/actions/runner/pull/1144/files">Architecture Decision Record</a> that&rsquo;s been accepted&hellip;so now it&rsquo;s just a matter of time?&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
        </item>
        
        <item>
            <title>Don&#39;t Worry, Just Launch</title>
            <link>http://localhost:1313/posts/2021/01/dont-worry-just-launch/</link>
            <pubDate>Mon, 11 Jan 2021 00:01:19 -0500</pubDate>
            
            <guid>http://localhost:1313/posts/2021/01/dont-worry-just-launch/</guid>
            <description>I&amp;rsquo;ve been writing Kotlin code for nearly 20% of my professional programming life! I wrote my first scrap of Kotlin in roughly mid-2018, and transitioned to writing full-time production Kotlin in mid-2019. Ever since then, I&amp;rsquo;ve been on the Kotlin train 100%.
Despite all that Kotlin experience, the new Hatch Credit Android app (launching Q1-2021‚ú®) is the first time I&amp;rsquo;ve used 100% coroutines in production code, so I still write some dumb code sometimes.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been writing Kotlin code for nearly 20% of my professional programming life! I wrote my first scrap of Kotlin in roughly mid-2018, and transitioned to writing full-time production Kotlin in mid-2019. Ever since then, I&rsquo;ve been on the Kotlin train 100%.<br>
Despite all that Kotlin experience, the new <a href="https://play.google.com/store/apps/details?id=com.hatchcard.android">Hatch Credit Android app</a> (launching Q1-2021‚ú®) is the first time I&rsquo;ve used 100% coroutines in production code, so I still write some dumb code sometimes.</p>
<p>A great example: this week, I was adding some basic feature flagging and crash reporting to the app, using LaunchDarkly and Sentry. Given that I already had a User coming from my repository, I used a <code>SharedFlow</code> to multiplex so that Sentry and LaunchDarkly could each handle things in their own time:</p>
<pre><code class="language-kotlin">class Analytics {
    init { // ‚ö†Ô∏è DO NOT USE THIS CODE ‚ö†Ô∏è
        scope.launch() { 
            val userFlow = userRepo.observeUser(refresh = false)
                .map { /** filter+transform the User */ }
                .shareIn(this, SharingStarted.WhileSubscribed(), 1)

            userFlow
                .collect { /* consume User for Sentry setup */ }

            userFlow
                .collect { /** consume for LaunchDarkly setup */ }
        }
    }
}
</code></pre>
<p>Simple enough, right? I wrote this code, proceeded to <del>write comprehensive tests</del> eyeball it, and then committed the code to GitHub without a second thought. The next day, I start testing the app to cut a release, and I realize ‚Äì <em>hey, LaunchDarkly never gets set up!</em></p>
<p>I do all the standard debugging things ‚Äì <code>println</code>, breakpoints (Android Studio + Coroutines is a nightmare, even on <code>7.0.0 Arctic Fox</code>), to no avail. Sentry handles the <code>Flow</code> just fine, LaunchDarkly sees nothing.</p>
<p>I&rsquo;ll spare y&rsquo;all the hours of debugging I lost to my own stupid mistake. I <em>will</em> tell you that: coroutine scopes don&rsquo;t like to be shared! Here&rsquo;s how I fixed my issue:</p>
<pre><code class="language-kotlin">class Analytics {
    init {
        val userFlow = userRepo.observeUser(refresh = false)
             .map { /** filter+transform the User */ }  
             .shareIn(scope, SharingStarted.Eagerly, 1)

        userFlow
            .onEach { /* setup sentry */ }
            .launchIn(scope)

        userFlow
            .onEach { /* setup LaunchDarkly */ }
            .launchIn(scope)
    }
}
</code></pre>
<p>(note: there&rsquo;s another solution involving <code>CoroutineScope.async</code>, see below for that code)</p>
<h2 id="whats-the-difference">What&rsquo;s the difference?</h2>
<p>Here&rsquo;s what went wrong at first, and why this code works:</p>
<p>In case you&rsquo;re not familiar, <code>Flow&lt;T&gt;.launchIn(CoroutineScope)</code> turns your <code>launch</code> into a kind of postfix operator instead of having to nesting a <code>collect</code> inside a <code>launch</code> block.</p>
<pre><code class="language-kotlin">scope.launch { 
    flowOf(1, 2, 3).collect()
}
// ‚¨ÜÔ∏è these are equivalent ‚¨áÔ∏è
flowOf(1, 2, 3).launchIn(scope)
</code></pre>
<p>In writing my original bit of code, I made a few mistakes:</p>
<ol>
<li>I assumed that <code>launch+collect</code> and <code>launchIn</code> were exactly equivalent ‚Äì not true when your <code>launch</code> has multiple <code>collect</code> statements! This leads to (2):</li>
<li>I forgot that <code>Flow.collect</code> is a suspending terminal operator, so for a never-ending stream (e.g. a Flow from your Repository), <code>collect</code> will never complete!</li>
</ol>
<p><code>CoroutineScope.launch</code> only starts <em>one</em> new coroutine, so in the following situation, <strong>only one Flow will start</strong>; the other Flow will patiently wait (forever!):</p>
<pre><code class="language-kotlin">init {
    scope.launch { // ‚ö†Ô∏è BAD CODE DON'T DO THIS
        // ‚úÖ doesn't emit, but runs fine
        val neverEnding = flow&lt;Unit&gt; { while(true) delay(100) }.collect { println(&quot;neverending!&quot;) } 

        // ‚ùå never runs because `neverEnding`
        val neverStarting = flowOf(1, 2, 3).collect { println(&quot;$it&quot;) }
    }
}
</code></pre>
<p>Instead, since coroutines are cheap, don&rsquo;t worry and <code>launch</code> as many of them as you need:</p>
<pre><code class="language-kotlin">init {
    flow { while(true) delay(100) }.launchIn(scope)  // ‚úÖ runs fine
    flowOf(1, 2, 3).launchIn(scope) // ‚úÖ also runs fine
}
</code></pre>
<p>This construction has the added benefit of making your code read nicer too ‚Äì less indentation! üéâ</p>
<h2 id="bonus">Bonus</h2>
<h3 id="extensions">Extensions!</h3>
<p>In search of a less verbose Flow collection mechanism, I&rsquo;ve built a small extension to help process Flow emissions in a given <code>CoroutineScope</code>:</p>
<pre><code class="language-kotlin">fun &lt;T&gt; Flow&lt;T&gt;.launchIn(scope: CoroutineScope, collector: suspend (T) -&gt; Unit): Job {
    return scope.launch { collect(collector) }
}

//Sample Usage:
val scope = ... //e.g. viewModelScope
flowOf(1, 2, 3)
    .launchIn(scope) { int -&gt; println(&quot;$int&quot;) }
</code></pre>
<p>This combines the concision of <code>launchIn</code> with the standard collection handles you&rsquo;d use in <code>onEach</code> or <code>collect</code>. Best of both worlds!</p>
<h3 id="async-instead-of-launch">Async instead of Launch</h3>
<p>There&rsquo;s another way to solve the original problem, which <a href="https://blog.danlew.net/">Dan Lew</a> pointed out &ndash; <code>CoroutineScope.async</code>!</p>
<pre><code class="language-kotlin">init { 
    scope.launch { 
        val userFlow = userRepo.observeUser(refresh = false)
            .map { /** filter+transform the User */ }
            .shareIn(this, SharingStarted.WhileSubscribed(), 1)
        
        val sentry = async { userFlow.collect { /* consume User for Sentry setup */ } }         
        val launchDarkly = async { userFlow.collect { /* consume User for LaunchDarkly setup */ } }         
        sentry.await() + launchDarkly.await()
    }
}
</code></pre>
<h2 id="references--extra-reading--sources">References | Extra Reading | Sources</h2>
<p>My deep appreciation goes out to:</p>
<ul>
<li><a href="https://twitter.com/ianhlake">Ian Lake</a> and <a href="https://twitter.com/friendlyMikhail">Mike Nakhimovich</a> for very patiently helping me debug issues that didn&rsquo;t pertain to them or their libraries in the slightest üòÅ</li>
<li><a href="https://twitter.com/DSeweryn">Dariusz Seweryn</a>, <a href="https://blog.danlew.net/">Dan Lew</a>, and <a href="https://twitter.com/geoffreymetais">Geoffrey Metais</a> for pointing out that <code>collect</code> is a suspending operator and providing feedback on the code snippets üôèüèæ</li>
<li><a href="https://twitter.com/ki_run">Kiran Rao</a> and <a href="https://twitter.com/Akshay_Chordiya">Akshay Chordiya</a> for some copy-editing ‚úçüèΩ</li>
</ul>
<p>Also:</p>
<ul>
<li>Kotlin Docs - Launching Flow: <a href="https://kotlinlang.org/docs/reference/coroutines/flow.html#launching-flow">https://kotlinlang.org/docs/reference/coroutines/flow.html#launching-flow</a></li>
<li>Kotlin Docs - Async: <a href="https://kotlinlang.org/docs/reference/coroutines/composing-suspending-functions.html#structured-concurrency-with-async">https://kotlinlang.org/docs/reference/coroutines/composing-suspending-functions.html#structured-concurrency-with-async</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Static in Kotlin</title>
            <link>http://localhost:1313/posts/2020/06/static-in-kotlin/</link>
            <pubDate>Tue, 23 Jun 2020 16:42:26 -0700</pubDate>
            
            <guid>http://localhost:1313/posts/2020/06/static-in-kotlin/</guid>
            <description>ed. note: This blog post was written in June 2020, when Kotlin 1.3.72 was in production. It&amp;rsquo;s possible the Kotlin compiler has gotten smarter since then!
My current company uses Kotlin for the backend services, so naturally we use the most standard of JVM logging setups: SLF4J + Logback.
From my old-timey Java days, I know that the idiomatic way to set up an SLF4J logger is like so:</description>
            <content type="html"><![CDATA[<hr>
<p><em>ed. note:</em> This blog post was written in June 2020, when Kotlin 1.3.72 was in production. It&rsquo;s possible the Kotlin compiler has gotten smarter since then!</p>
<hr>
<p>My <a href="https://www.hatchcard.com/">current company</a> uses Kotlin for the backend services, so naturally we use the most standard of JVM logging setups: <a href="http://www.slf4j.org/">SLF4J</a> + <a href="http://logback.qos.ch/">Logback</a>.</p>
<p>From my old-timey Java days, I know that the idiomatic way to set up an SLF4J logger is like so:</p>
<pre><code class="language-java">public class Direction { 
    private static final Logger logger = LoggerFactory.getLogger(Direction.class)
    
    public void navigate() { 
        logger.info(...)
    }
}
</code></pre>
<p>But it&rsquo;s 2020, and we write Kotlin now üéâ A few websites I found helpfully suggest the most basic-but-functional Kotlin version of this:</p>
<pre><code class="language-kotlin">class Direction { 
    private val LOG = LoggerFactory.getLogger(Direction::class.java)
    
    public fun navigate() { 
        LOG.info(&quot;println(TAG)&quot;)
    }
}
</code></pre>
<p>But you&rsquo;ll note that this doesn&rsquo;t achieve the same result as our Java snippet; a glance at the generated Java reveals this:</p>
<pre><code class="language-java">public final class Direction {
   private final Logger LOG = LoggerFactory.getLogger(Direction.class);

   public final void navigate() {
      this.LOG.info(&quot;println(TAG)&quot;);
   }
}
</code></pre>
<p>Yikes! Each new instance of <code>Direction</code> will spin up a new <code>LOG</code> as well, which can get expensive, if we&rsquo;re not careful.</p>
<p>This generalizes to a whole bunch of situations where we&rsquo;d prefer to have one instance of something available to a class. In Java, we&rsquo;d use <code>static</code> to solve this problem.</p>
<h2 id="automatic-static">Automatic Static</h2>
<p>Naturally, Kotlin doesn&rsquo;t have any <code>static</code> keywords. Nevertheless, from our encyclopedic knowledge of Kotlin reserved keywords, we know about <code>const</code>. If we combine that with a <code>companion object</code>, can we get what we want?</p>
<p>Actually, that doesn&rsquo;t help us with logging! According to <a href="https://kotlinlang.org/docs/reference/properties.html#compile-time-constants">the docs</a> (and the compiler!), there are two reasons this won&rsquo;t work:</p>
<ol>
<li><code>const</code> can only be used with values known at compile-time. (Alas, poor <code>Logger</code>, we can&rsquo;t know you early enough üòø)</li>
<li><code>Logger</code> isn&rsquo;t a primitive/String, and <code>const</code> only works with primitives</li>
</ol>
<p>That&rsquo;s fine, what if we remove the <code>const</code> - isn&rsquo;t a companion object basically like a Java <code>static final</code>?</p>
<pre><code class="language-kotlin">class Direction { 
    companion object {
        private val LOG = LoggerFactory.getLogger(Direction::class.java)
    }
    
    public void navigate() { 
        LOG.info(&quot;println(TAG)&quot;)
    }
}

</code></pre>
<p>The Java we generate is roughly:</p>
<pre><code class="language-java">public final class Direction {
   private static final Logger LOG = LoggerFactory.getLogger(Direction.class);
   public static final Direction.Companion Companion = new Direction.Companion();

   public final void navigate() {
      LOG.info(&quot;println(TAG)&quot;);
   }

   public static final class Companion {
      private Companion() {}
   }
}

</code></pre>
<p>Hey! That&rsquo;s not bad! Pretty efficient, and the extra <code>Companion</code> class doesn&rsquo;t really concern me much. On Android, R8 happily inline that (assuming you&rsquo;ve enabled the <a href="https://www.guardsquare.com/en/products/proguard/manual/usage#allowaccessmodification"><code>-accessmodification</code> flag</a>), and on other systems (e.g. backend), the JVM should inline that as well.</p>
<p>But I don&rsquo;t get paid to write pretty generated Java code, I get paid to write Kotlin. It&rsquo;s not a lot to type, but <code>companion object</code> with all those newlines can wear on you!</p>
<p>Well, what about a top-level declaration? Putting our <code>Logger</code> setup there will definitely make it <code>static</code>. Let&rsquo;s check it out!</p>
<pre><code class="language-kotlin">private val LOG = LoggerFactory.getLogger(Direction::class.java)

class Direction {
    fun navigate() {
        LOG.info(&quot;println(TAG)&quot;)
    }
}
</code></pre>
<p>Gives us:</p>
<pre><code class="language-java">public final class DirectionKt {
   private static final Logger LOG = LoggerFactory.getLogger(Direction.class);

   // $FF: synthetic method
   public static final Logger access$getLOG$p() {
      return LOG;
   }
}

public final class Direction {
   public final void navigate() {
      MyClassKt.access$getLOG$p().info(&quot;println(TAG)&quot;);
   }
}
</code></pre>
<p>That synthetic accessor makes sense, since you&rsquo;re essentially calling another class&rsquo;s private field.</p>
<p>For folks who got into Kotlin but never wrote much Java, this generated code might be a bit surprising. But don&rsquo;t worry &ndash; the perf impact there is negligible; once again, R8 or JVM HotSpot will realistically inline that for you.</p>
<p>But is this really the end of the road? Can Kotlin really only be half as &ldquo;space-efficient&rdquo; as Java?</p>
<h2 id="whats-in-a-name">What&rsquo;s in a name?</h2>
<p>The problem here is that Kotlin seems to generate another <code>DirectionKt</code> class to warehouse the static elements - akin to a companion object. But what if there was a way to direct Kotlin to &ldquo;merge&rdquo; the <code>*Kt</code> class with the &ldquo;real&rdquo; class?</p>
<p>Perhaps <code>@JvmName</code> could save us from multiple classes? More specifically, prepending <code>@file:JvmName(&quot;Direction&quot;)</code> to our previous Kotlin snippet gives us:</p>
<p>&hellip; a compile error üíÄ</p>
<pre><code class="language-shell">e: /Users/parth/.../Direction.kt: (1, 1): Duplicate JVM class name 'Direction' generated from: 
package-fragment, Direction
</code></pre>
<p>(Fun fact: the IntelliJ IDEA 2020.2 EAP totally lets you put the <code>@file:JvmName</code> thing without showing you any lint or warnings)</p>
<p>Darn.</p>
<hr>
<h2 id="conclusions---how-to-be-static">Conclusions - how to be static</h2>
<p>But which is better? <code>companion</code> or top-level declaration?</p>
<p>From a perf/size perspective, you get the same bytecode generated for you, so they&rsquo;re the same.</p>
<p><del>Bikesheddingly</del> <strong>Personally, I prefer the top-level declaration.</strong> It&rsquo;s out-of-the-way, it&rsquo;s less to read, and least importantly, almost 20 fewer characters to type!</p>
<p>‚ö†Ô∏è There is one &ldquo;gotcha&rdquo; with a top-level declaration: You <em>must</em> mark the top-level <code>val</code> as <code>private</code>, or you could get into wacky situations where another class accidentally uses another class&rsquo;s <code>Logger</code> instance.
Have fun tracking down that logging bug! üôÄüêõ</p>
<p>That being said, if you&rsquo;ve already got a <code>companion</code> for something, there&rsquo;s literally no reason you shouldn&rsquo;t put your <code>LOG</code> setup in there as well!</p>
<p>&hellip;Except for testability, but that&rsquo;s a blog post for another day.</p>
<p>Happy logging üå≤ (or whatever else you put in static members)!</p>
<hr>
<h2 id="references--extra-reading--sources">References | Extra Reading | Sources</h2>
<p>Many thanks to <a href="https://www.zacsweers.dev">Zac Sweers</a> for telling me &ldquo;you need to revise this&rdquo;, and <a href="https://publicobject.com/">Jesse Wilson</a> for pointing out that non-private top-level declarations can cause problems.</p>
<p>Also:</p>
<ul>
<li>Egor Andreevich - <a href="https://blog.egorand.me/where-do-i-put-my-constants-in-kotlin/">https://blog.egorand.me/where-do-i-put-my-constants-in-kotlin/</a></li>
<li>Christophe Beyls - <a href="https://medium.com/@BladeCoder/exploring-kotlins-hidden-costs-part-1-fbb9935d9b62">https://medium.com/@BladeCoder/exploring-kotlins-hidden-costs-part-1-fbb9935d9b62</a></li>
<li>Roman Elizarov (<a href="https://discuss.kotlinlang.org/t/what-is-the-advantage-of-companion-object-vs-static-keyword/4034/2">source</a>):
<blockquote>
<p>If you follow the style of writing the statics at the top of the class in Java, then I suggest to try to consider writing them <em>at the top level</em> (e.g. before class declaration) in Kotlin. For many use-cases it works better than introducing a <code>companion object.</code></p>
</blockquote>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>I Go, Hugo, They Go</title>
            <link>http://localhost:1313/posts/2020/05/i-go-hugo-they-go/</link>
            <pubDate>Mon, 18 May 2020 08:39:55 -0700</pubDate>
            
            <guid>http://localhost:1313/posts/2020/05/i-go-hugo-they-go/</guid>
            <description>A dump of my experiences getting this blog set up - from Hugo, to GitHub deploy, to Google Domain CNAME entries.
Ed. note: I have no idea how Hugo is intended to be pronounced; it could be oo-go (√° la Hugo Chavez), or hyoo-go, as the name is pronounced in American English. For the punning purposes of the title, I&amp;rsquo;m assuming it&amp;rsquo;s the latter pronunciation.
This shouldn&amp;rsquo;t be so complicated. Somehow, with all the resources online of how to get Hugo + GitHub Pages + Custom Domain set up, I still ran into strange, arcane hurdles.</description>
            <content type="html"><![CDATA[<p>A dump of my experiences getting this blog set up - from Hugo, to GitHub deploy, to Google Domain CNAME entries.</p>
<hr>
<p><strong>Ed. note:</strong> I have no idea how <code>Hugo</code> is intended to be pronounced; it could be <em><code>oo-go</code></em> (√° la <em>Hugo Chavez</em>), or <em><code>hyoo-go</code></em>, as the name is pronounced in American English. For the punning purposes of the title, I&rsquo;m assuming it&rsquo;s the latter pronunciation.</p>
<hr>
<h3 id="this-shouldnt-be-so-complicated">This shouldn&rsquo;t be so complicated.</h3>
<p>Somehow, with all the resources online of how to get Hugo + GitHub Pages + Custom Domain set up, I still ran into strange, arcane hurdles.</p>
<p>Maybe this is because while I <em>technically</em> understand things like static site generators and DNS and CNAME, it&rsquo;s a far cry from actually understanding how to set something up <em>correctly</em>.</p>
<p><em>Plot twist:</em> I finally got everything configured correctly - proof: you&rsquo;re reading it now! üßê</p>
<p>Here was my eventual setup:</p>
<ul>
<li>a <a href="https://domains.google/">Google Domains</a> listing for <code>jvmname.dev</code></li>
<li>a <code>CNAME</code> record in Google Domains pointing from <code>www.jvmname.dev</code> to <code>jvmname.github.io</code></li>
<li>an <code>A/ANAME</code> record in Google Domains pointing to the <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Github CDNs</a></li>
<li>a GitHub repo for the <strong>source</strong> files - e.g. <code>parth-blog-source</code></li>
<li>a GitHub Pages repo for the <strong>generated</strong> content.
<ul>
<li>This one should adhere to the GitHub Pages format: <code>&lt;ghuser&gt;.github.io</code>; for me, that&rsquo;s <code>jvmname.github.io</code></li>
</ul>
</li>
<li>a local Hugo installation</li>
</ul>
<p>Here&rsquo;s what you should do to achieve the same setup:</p>
<h1 id="step-1-get-your-domain">Step 1: Get your domain!</h1>
<p><a href="https://domains.google">domains.google</a> has lots of fun options, and since you&rsquo;re a developer, definitely consider a <code>*.dev</code> domain üë®üèΩ‚Äçüíªüë©üèª‚Äçüíª</p>
<p>All <code>.dev</code> domains are <a href="https://domains.google/tld/security/">USD 12/year</a> (as of 05/2020). I suspect, for most people, that&rsquo;s relatively affordable. If that&rsquo;s the case for you, it might make sense to buy your domain ahead of time, just to stake your claim.</p>
<hr>
<h1 id="step-2-install-hugo">Step 2: Install Hugo</h1>
<p>Follow the well-written <a href="https://gohugo.io/getting-started/quick-start/">Hugo Quickstart Guide</a> with the following caveats:</p>
<h4 id="caveat-1-name-your-folder-better">Caveat 1: Name your folder better</h4>
<p><a href="https://gohugo.io/getting-started/quick-start/#step-2-create-a-new-site">Hugo Quickstart Step 2</a> suggests running <code>hugo new site quickstart</code>, but that will make a folder named <code>quickstart</code>, and that&rsquo;s not actually a useful name ü§¶üèΩ‚Äç‚ôÇÔ∏è</p>
<p>You should use a name that makes sense to you!</p>
<ul>
<li><code>website-source</code></li>
<li><code>hugo-content</code></li>
<li><code>blog-source</code></li>
</ul>
<p>Literally anything! For the purposes of this guide, we&rsquo;re going to pretend you chose the name <code>blog-source</code>.</p>
<h4 id="caveat-2-customize-your-output-dir">Caveat 2: Customize your output dir</h4>
<p>By default, the <code>hugo</code> command will emit generated HTML in <code>blog-source/public</code>. Since we&rsquo;re planning on pushing the generated output to <code>&lt;ghuser&gt;.github.io</code>, let&rsquo;s define the output directory as that!</p>
<p>In your <code>config.toml</code> (or <code>yaml</code>/<code>json</code>), find the key <code>publishDir</code> and update it to:</p>
<pre><code class="language-toml">publishDir   = &quot;&lt;ghuser&gt;.github.io&quot;
</code></pre>
<p><em>Note:</em> if it exists, you should <code>rm -r public</code>, since it&rsquo;s useless now. Don&rsquo;t worry, that whole folder is generated code, so you can blow it away with reckless abandon üí•</p>
<h4 id="caveat-3-choose-your-theme">Caveat 3: Choose your theme</h4>
<p>In general, I&rsquo;d recommend a theme that has an <code>exampleSite</code> directory in the theme&rsquo;s Github repo (e.g. <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng/tree/master/exampleSite"><code>hello-friend-ng/exampleSite/</code></a>).</p>
<p>This makes it drop-dead-simple to copy the config from <code>exampleSite/config.toml</code> to your top-level <code>config.toml</code>, as opposed to having to comb through documentation to find the necessary configuration parameters - ain&rsquo;t nobody got time for that!</p>
<hr>
<h1 id="step-3-set-up-your-source-repo">Step 3: Set up your source repo</h1>
<p>Ordinarily, you&rsquo;d want to set this up before anything else, but I&rsquo;ve seen reports online of Hugo complaining if the target directory already exists. So we create the <code>blog-source/</code> dir first, and then create the repo!</p>
<ol>
<li>in your local <code>blog-source/</code> directory, run <code>git init</code> to create a new local Git repo</li>
<li>go through your standard <em>&ldquo;create a new repository&rdquo;</em> flow on GitHub</li>
<li>finally, add the remote origin to your local repo: <div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span> git remote add origin git@github.com:&lt;ghuser&gt;/blog-source.git </span></span></code></pre></div></li>
</ol>
<p>If you like, you can do a quick test to make sure everything works as expected:</p>
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -am <span style="color:#5af78e">&#34;initial commit&#34;</span>
</span></span><span style="display:flex;"><span>git push origin master</span></span></code></pre></div>
<hr>
<h1 id="step-4-write-revise-repeat">Step 4: Write, Revise, Repeat</h1>
<p>Time to flex your literary muscles! Write a blog post or two - something you learned at work or on a side project. Maybe you just took a vacation and you&rsquo;ve got some cool photos to turn into a photo essay? Doesn&rsquo;t matter, just be creative ‚ö°Ô∏è</p>
<p>Some useful learnings distilled from my experience creating content through Hugo:</p>
<h4 id="images-and-hugo-shortcodes">Images and Hugo Shortcodes</h4>
<p>Hugo defines some <a href="https://gohugo.io/content-management/shortcodes/">markdown-friendly shortcodes</a>. which, oestensibly, is easier than hand-coding HTML.</p>
<p>I&rsquo;ve found the <code>figure</code> shortcode to be useful for just chucking images into your markdown files:</p>
<pre><code>{{&lt; figure src=&quot;/img/spf13.jpg&quot; title=&quot;Steve Francia&quot; &gt;}}
</code></pre>
<p>It works for content placed into the <code>/static/*</code> dir, as well as any web content:</p>
<pre><code>{{&lt; figure src=&quot;https://images.unsplash.com/photo-1474667689933-0ff72b3d16e9&quot; 
title=&quot;Suspended Cups&quot; 
attr=&quot;[Chris Scott](https://unsplash.com/photos/NEc3YEN1FFw)&quot; &gt;}}
</code></pre>
<p>I don&rsquo;t write HTML for a living, so, to me, this feels easier than having to read the W3C spec to learn how the <code>&lt;figure&gt;</code> tag works.</p>
<p><em>Note:</em> if you want to do more heavy-weight processing at &ldquo;compile-time&rdquo;, <a href="https://laurakalbag.com/processing-responsive-images-with-hugo/">Laura Kalbag has a great blog post</a> on image processing.</p>
<h4 id="content-directories">Content Directories</h4>
<p>AKA <a href="https://gohugo.io/content-management/page-bundles/"><em>page bundles</em> </a> in Hugo parlance. They&rsquo;re all arbitrary names, and most themes will have some pre-defined top-level pages in the <code>config.toml</code>. For the theme I use, <code>hello-friend-ng</code>, the defaults were:</p>
<pre><code class="language-toml">[menu]
  [[menu.main]]
    identifier = &quot;about&quot;
    name       = &quot;About&quot;
    url        = &quot;about/&quot;
  [[menu.main]]
    identifier = &quot;posts&quot;
    name       = &quot;Posts&quot;
    url        = &quot;posts/&quot;
</code></pre>
<p>Feel free to change these names or URLs to match your preferences. For example, this is my <code>config.toml</code>&rsquo;s menu settings (as of 05/2020):</p>
<pre><code class="language-toml">[menu]
 [[menu.main]]
    identifier = &quot;posts&quot;
    name       = &quot;Posts&quot;
    url        = &quot;posts/&quot;
  [[menu.main]]
    identifier  = &quot;speaking&quot;
    name        = &quot;Speaking&quot;
    url         = &quot;speaking/&quot;
  [[menu.main]]
    identifier = &quot;about&quot;
    name       = &quot;Me&quot;
    url        = &quot;about/&quot;
</code></pre>
<p>‚ö†Ô∏è‚ö†Ô∏è If you change the <code>url</code>s for any menu items, just make sure you rename the directory in <code>content/</code> as well - e.g. <code>mv content/posts content/blog</code>.</p>
<hr>
<h2 id="step-5-create-github-pages-repo--submodule">Step 5: Create GitHub Pages Repo + Submodule</h2>
<ol>
<li><strong>Double-check your Hugo config</strong> - At this point, we haven&rsquo;t set up the DNS infra to support any custom domains, so let&rsquo;s double-check that our main <code>config.toml</code> is using the &ldquo;boring&rdquo; Github-pages base URL:
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span> baseURL     = <span style="color:#5af78e">&#34;&lt;ghuser&gt;.github.io&#34;</span>    </span></span></code></pre></div></li>
<li><strong>Create the GH Page repo</strong> - follow the steps on <a href="https://help.github.com/en/github/working-with-github-pages/creating-a-github-pages-site">Creating a GitHub Pages site article</a>.</li>
<li><strong>Clone the repo locally</strong> - <code>git clone git@github.com:&lt;ghuser&gt;/&lt;ghuser&gt;.github.io.git</code></li>
<li><strong>Link repo as submodule</strong> - In your <strong>blog-sources/</strong> repo, create a submodule link to your GH-page repo:
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> git submodule add git@github.com:&lt;ghuser&gt;/&lt;ghuser&gt;.github.io.git </span></span></code></pre></div></li>
<li><strong>Kick the tires</strong> - Now that you have a submodule link inside <code>blog-sources/</code>, let&rsquo;s make some commits to make sure everything got hooked up properly on your machine:
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#78787e"># in blog-sources</span>
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -am <span style="color:#5af78e">&#34;committing Hugo content sources&#34;</span> <span style="color:#78787e">#&#34;outer&#34; commit</span>
</span></span><span style="display:flex;"><span>git push origin master <span style="color:#78787e"># push the sources to `blog-sources`</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hugo <span style="color:#78787e">#generate the HTML from our sources</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">cd</span> &lt;ghuser&gt;.github.io <span style="color:#78787e"># now we&#39;re inside the submodule</span>
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -am <span style="color:#5af78e">&#34;committing Hugo generated HTML&#34;</span> <span style="color:#78787e">#&#34;inner&#34; commit</span>
</span></span><span style="display:flex;"><span>git push origin master <span style="color:#78787e"># push the generated content to &lt;ghuser&gt;.github.io</span></span></span></code></pre></div></li>
<li>If all is right with the world, if you go to the GitHub page for <code>blog-sources</code>, you should see your &ldquo;outer&rdquo; commit; ditto for your <code>&lt;ghuser&gt;.github.io</code> repo.</li>
</ol>
<p>In fact, wait about 5 minutes for GitHub to build+deploy&hellip;and then if you navigate to <code>www.&lt;ghuser&gt;.github.io</code>, you should see your website! üéâüéâ</p>
<p>But we&rsquo;re not done yet.</p>
<hr>
<h2 id="step-6-deployment">Step 6: Deployment</h2>
<p>I stole this script in totality from <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Hugo: Host on GitHub</a>. It&rsquo;s useful, if only because it allows us to build+commit+push to GitHub in one line.</p>
<pre><code class="language-shell">#!/bin/sh

set -e # If a command fails then the deploy stops

printf &quot;\033[0;32mDeploying updates to GitHub...\033[0m\n&quot;

hugo # Build the project.

cd &lt;ghuser&gt;.github.io # Go to generated output folder

git add . # Add changes to git.

msg=&quot;rebuilding site $(date)&quot;
if [ -n &quot;$*&quot; ]; then
	msg=&quot;$*&quot;
fi
git commit -m &quot;$msg&quot; # Commit changes.

git push origin master # Push source and build repos.
</code></pre>
<p>Assuming you put it in a file <code>deploy.sh</code>, you&rsquo;d use it from <code>blog-sources/</code> as:</p>
<pre><code class="language-shell">./deploy.sh &quot;my optional commit message&quot;
</code></pre>
<p>A few notes:</p>
<ul>
<li>this script &ldquo;fails fast&rdquo;: e.g., it will not push to <code>master</code> if there&rsquo;s no staged changes to commit, even if there are other commits that could be pushed</li>
<li>this script leaves you in the <code>&lt;ghuser&gt;.github.io</code> submodule</li>
<li>‚ö†Ô∏è this script <strong>does not</strong> stage/commit changes in the main <code>blog-sources</code> repository</li>
</ul>
<hr>
<h2 id="step-7-configure-custom-domain--setup-dns">Step 7: Configure Custom Domain + Setup DNS</h2>
<p>So close to the end! For this section, I&rsquo;m assuming your custom domain is <code>example.dev</code>.</p>
<h4 id="71-google-domains-config">7.1: Google Domains Config</h4>
<p>Here&rsquo;s what you&rsquo;ll need to do:</p>
<ol>
<li>
<p>create a <a href="https://dnsmadeeasy.com/services/anamerecords/"><code>CNAME</code> entry</a> to alias <code>www.example.dev</code> &ndash;&gt; <code>&lt;ghuser&gt;.github.io</code></p>
<p>‚ö†Ô∏è <strong>the <code>www.</code> is crucial</strong>; without it, your users&rsquo; browsers won&rsquo;t be redirected from <code>www.example.dev</code> to <code>example.dev</code></p>
</li>
<li>
<p>create an <a href="https://dnsmadeeasy.com/services/anamerecords/"><code>A/ANAME</code> record</a> to alias <code>example.dev</code> &ndash;&gt; <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">GitHub Pages CDN</a> (~equivalent to <code>&lt;ghuser&gt;.github.io</code>).</p>
<p>At the time of this writing (05/2020), the four IP addresses you&rsquo;ll need to alias are:</p>
<pre><code>185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
</code></pre>
</li>
</ol>
<p>This post is long enough, and I&rsquo;ll be honest, I don&rsquo;t <em>fully</em> understand the difference between <code>example.dev</code> and <code>www.example.dev</code>, so I&rsquo;ll leave that to someobody else to explain. All I know is that I ended up needing both ü§∑üèæ‚Äç‚ôÇÔ∏è</p>
<p>There&rsquo;s 2 things that weren&rsquo;t apparent to me when configuring this in Google Domains:</p>
<ol>
<li>the <code>CNAME</code> record setup accepts <code>www.example.dev</code> and then converts it to <code>www</code>.
<strong>This is okay, and is expected.</strong></li>
<li>the <code>ANAME</code> (just <code>A</code> in the config page) will not accept <code>example.dev</code>, you&rsquo;ll have to put <code>@</code>.
<strong>This is okay, and is expected.</strong></li>
</ol>
<p>Besides that convolution (I&rsquo;m sure that decision made sense to <em>someone</em>) the Google Domains page is pretty straightforward, but just to check your work, this is what my config looks like (as of 05/2020):
<figure><img src="/img/google-domain-setup.png">
</figure>
</p>
<p>‚ö†Ô∏è Note: I did this while I was based in Arizona (US west coast), and so probably experienced very fast propagation times from Google&rsquo;s DNS servers ‚ö°Ô∏è. Google claims that propagating these changes can take up to 48 hours; if things aren&rsquo;t working, but you&rsquo;re 115% sure that you typed everything in correctly, come back in a day and try again.</p>
<h4 id="72-hugogithub-config">7.2: Hugo/GitHub Config</h4>
<p>Here, we&rsquo;ll be telling Hugo and GitHub what URL to use.</p>
<p>You&rsquo;ll need to update the <code>baseURL</code> in the <code>config.toml</code> file to point to your fancy new domain:
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span> baseURL = <span style="color:#5af78e">&#34;https://example.dev&#34;</span>    </span></span></code></pre></div></p>
<p>Additionally, GitHub requires a little config file to be at the top-level of the <code>*.github.io</code> repo so its CDN knows how to generate the redirects. Instead of checking this file into the repo directly, let&rsquo;s put it in the <strong>sources</strong> repo, so we can be assured it&rsquo;ll always be copied over when we generate a new website:</p>
<p><div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#ff5c57">cd</span> static  <span style="color:#78787e">#in blog-sources/</span>
</span></span><span style="display:flex;"><span>touch CNAME
</span></span><span style="display:flex;"><span><span style="color:#ff5c57">echo</span> example.dev &gt; CNAME</span></span></code></pre></div>
(from the <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain">Hugo Docs</a>)</p>
<p>Fun fact, this is the same file that&rsquo;s generated if you go to your Github repo settings -&gt; <strong>Github Pages</strong> -&gt; <strong>Custom domain</strong> -&gt; and enter <code>example.dev</code></p>
<p>At this point, run <code>./deploy.sh</code>, then go to your repo settings for <code>&lt;ghuser&gt;.github.io</code>, find the section called <strong>GitHub Pages</strong>, and enable <code>‚úÖ Enforce HTTPS</code>.</p>
<hr>
<h2 id="step-8-the-waiting-game">Step 8: The waiting game</h2>
<p>That&rsquo;s all the &ldquo;work&rdquo; you have to do! Clicking the HTTPS box in your settings will kick off a bunch of automated processes on GitHub&rsquo;s side to set up the correct certificate chains using Let&rsquo;s Encrypt.</p>
<p>This is necessary because <a href="https://domains.google/tld/security/">Google Domains <em>requires</em> all traffic</a> to your <code>(www.)example.dev</code> domain(s) to be encrypted by way of <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security#HSTS_mechanism_overview"><strong>H</strong>TTP <strong>S</strong>trict <strong>T</strong>ransport <strong>S</strong>ecurity (HSTS)</a>. If you tried to navigate to <code>http://example.dev</code> <em>without</em> GitHub&rsquo;s cert chain set up, you would get an error like this:</p>
<figure><a href="https://i.stack.imgur.com/83l43.png"><img src="https://i.stack.imgur.com/83l43.png" width="450"></a>
</figure>

<p>In my experience, I had to play the waiting game for ~2 hours; depending on your location and whatever service worker load GitHub is experiencing at the moment, it might take more or less time to get your HTTPS cert set up. <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">GitHub claims</a> it can take up for 24 hours for the HTTPS option to even be <em>available</em> ‚è≥</p>
<h2 id="step-9-success-">Step 9: Success üéâ</h2>
<p>At some point, the HTTPS certificate gods will smile upon you, and your GitHub Page will have an HTTPS certificate. You&rsquo;ll know that the gods have accepted your blood-offering because you&rsquo;ll see a little green banner in your GitHub repo <code>&lt;ghuser&gt;.github.io</code> settings like this:</p>
<figure><img src="/img/gh-page-published.png">
</figure>

<p>That&rsquo;s the ballgame! Everything should look and work exactly as when you run <code>hugo server</code>!</p>
<p>Feel free to test out all the various combinations to get to your website:</p>
<ul>
<li><a href="https://www.example.dev">www.example.dev</a></li>
<li><a href="http://example.dev">http://example.dev</a></li>
<li><a href="http://www.example.dev">http://www.example.dev</a></li>
<li><a href="http://example.dev">example.dev</a></li>
<li><a href="https://example.dev">https://example.dev</a></li>
</ul>
<p>All of these should resolve to <code>https://example.dev</code>. If not, Check your DNS settings in Google Domains, and also maybe your CNAME file in your <code>blog-sources</code> project.</p>
<hr>
<p>Thanks for reading along! Hopefully this guide helps someone, or it makes you realize that you could pay <a href="https://ghost.org">Ghost</a> $30/mo to avoid this hassle üòÖ</p>
<hr>
<h2 id="references--sources--extra-reading">References | Sources | Extra Reading</h2>
<ol>
<li>Hugo - Hosting on GitHub: <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain">https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain</a></li>
<li>GitHub - Managing a custom domain for your GitHub Pages site: <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain</a></li>
<li>Creating and deploying your first Hugo site to Github pages: <a href="https://inside.getambassador.com/creating-and-deploying-your-first-hugo-site-to-github-pages-1e1f496cf88d">https://inside.getambassador.com/creating-and-deploying-your-first-hugo-site-to-github-pages-1e1f496cf88d</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Tracking Performance in Kotlin Suspending Functions</title>
            <link>http://localhost:1313/posts/2020/03/tracking-performance-in-kotlin-suspending-functions/</link>
            <pubDate>Sun, 29 Mar 2020 23:14:00 -0700</pubDate>
            
            <guid>http://localhost:1313/posts/2020/03/tracking-performance-in-kotlin-suspending-functions/</guid>
            <description>Suspended CupsChris Scott
Using Firebase Performance Monitoring to track the performance of a plain-ol‚Äô function (Java or Kotlin) is drop-dead simple using the @AddTrace annotation: @AddTrace(&amp;#34;some-trace-name&amp;#34;) fun myBoringFunction() { println(&amp;#34;nothing to see here!&amp;#34;) }
Wait a few moments, and you‚Äôll see some-trace-name in the Firebase Console!
But what if you want to track the performance of a suspend function? Unfortunately, this is not as straightforward.
Attempt #1: Suspending Disbelief Let‚Äôs say you have some uncomplicated suspending function, like so:</description>
            <content type="html"><![CDATA[<figure><img src="https://images.unsplash.com/photo-1474667689933-0ff72b3d16e9?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=810&amp;q=80"><figcaption>
      <h4>Suspended Cups</h4><p><a href="https://unsplash.com/photos/NEc3YEN1FFw">Chris Scott</a></p>
    </figcaption>
</figure>

<p>Using <a href="https://firebase.google.com/docs/perf-mon/get-started-android">Firebase Performance Monitoring</a> to track the performance of a plain-ol‚Äô function (Java or Kotlin) is drop-dead simple using the <a href="https://firebase.google.com/docs/perf-mon/custom_traces-metrics?platform=android#add-trace-annotation">@AddTrace annotation</a>:
<div class="highlight"><pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#ff9f43">@AddTrace</span>(<span style="color:#5af78e">&#34;some-trace-name&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff6ac1">fun</span> <span style="color:#57c7ff">myBoringFunction</span>() {
</span></span><span style="display:flex;"><span>    println(<span style="color:#5af78e">&#34;nothing to see here!&#34;</span>)
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div></p>
<p>Wait a few moments, and you‚Äôll see <code>some-trace-name</code> in the Firebase Console!</p>
<p>But what if you want to track the performance of a <code>suspend</code> function? Unfortunately, this is not as straightforward.</p>
<h2 id="attempt-1-suspending-disbelief">Attempt #1: Suspending Disbelief</h2>
<p>Let‚Äôs say you have some uncomplicated suspending function, like so:</p>
<pre><code class="language-kotlin">suspend fun myAsyncFunction() : Int {
    val result = 1 + 1
    delay(100L)   
    println(&quot;something to see here: $result&quot;)
    return result
}
</code></pre>
<p>A naive attempt to track this function‚Äôs performance would, as you might expect, to use <code>@AddTrace</code>:</p>
<pre><code class="language-kotlin">@AddTrace(&quot;some-other-trace-name&quot;)
suspend fun myAsyncFunction() : Int { ... }
</code></pre>
<p>Just eyeballing it, it should work, right? Even if you compile, the <code>firebase-perf</code> Gradle plugin won‚Äôt complain, and the Firebase Performance Monitoring library won‚Äôt crash your app. So maybe everything will Just Work? ü§ûüèΩ</p>
<p><strong>Plot Twist: it won‚Äôt work.</strong></p>
<p>To understand <em>why</em> it doesn‚Äôt work, you‚Äôll need to understand two things:</p>
<ol>
<li>how the Kotlin compiler produces a suspending state machine</li>
<li>how the <code>firebase-perf</code> Gradle plugin instruments the <code>@AddTrace</code> annotation into an actual Trace invocation</li>
</ol>
<p>For #1, <a href="https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f">Manuel Vivo has a great article</a> going into the nuts and bolts of what the suspend keyword actually <em>means</em>, and if you‚Äôre not familiar with the process, I recommend checking it out.
For our purposes, we‚Äôll simplify, and say that the Kotlin compiler will rewrite your <code>suspend</code> method signature, appending a <code>Continuation&lt;T&gt;</code> parameter, which allows it to build the state machine.</p>
<p>For #2, I don‚Äôt work at Google, so I‚Äôm not entirely sure how the <code>@AddTrace</code> instrumentation works under the hood. But I‚Äôve got some guesses!</p>
<p>Let‚Äôs take our previous example and ‚Äúcompile‚Äù it. We‚Äôll make 3 changes:</p>
<ol>
<li>simplify the ‚Äúguts‚Äù of the coroutine state machine</li>
<li>add some ‚Äúfake‚Äù Perf traces</li>
<li>‚Äúdecompile‚Äù everything into Kotlin source code, because nobody wants to read Kotlin JVM bytecode!</li>
</ol>
<pre><code class="language-kotlin">fun myAsyncFun(cont : Continuation){
    val perf = FirebasePerformance.getInstance()
    val trace = perf.newTrace(&quot;some-other-trace-name&quot;)
    trace.start()

    val result = 1 + 1
    
    //begin: coroutine state machine
    when(cont.label){
        0 -&gt; {
            //will call myAsyncFun with cont.label=1
            DelayKt.delay(100, cont) 
        }
        1 -&gt; {
            println(&quot;something to see here: $result&quot;)
            //hands control+result back to caller
            cont.resume(result, ...) 
        }
    }
    //end: coroutine state machine
    
    trace.end()
}
</code></pre>
<p>The coroutine‚Äôs state machine is muddying the waters ‚Äî it‚Äôs no wonder Firebase‚Äôs automated instrumentation can‚Äôt figure out where to put the <code>trace.end()</code>! What‚Äôs a performance-minded developer to do?</p>
<h2 id="attempt-2-if-you-try-finally-youll-succeed">Attempt #2: If you Try, Finally you‚Äôll succeed</h2>
<p>The heart of the issue is that the Firebase performance instrumentation can‚Äôt query suspending Kotlin bytecode for the method entry and exit.
But, as developers, <em>we</em> know when a suspending function will enter and exit; in fact, there‚Äôs even a Java/Kotlin paradigm to codifies this: <code>try/finally</code></p>
<p><code>try/finally</code> is exactly what we need: no matter what happens inside a method body, finally will always be executed last (or, finally!) ‚Äî this is a guarantee from the JVM, and you can see this reflected in any compiled Java/Kotlin bytecode. <a href="https://blog.jamesdbloom.com/JavaCodeToByteCode_PartTwo.html#try_catch_finally">Read more here</a></p>
<p>Armed with this knowledge, and a little bit of Kotlin magic‚ú®, we can write a little wrapper that can be used anywhere:</p>
<pre><code class="language-kotlin">inline fun &lt;E&gt; trace(name : String, block: (Trace) -&gt; E): E {
    val trace = startTrace(name) //creates &amp; starts a new Trace
    return try {
        block(trace)
    } finally {
        trace.stop()
    }
}
</code></pre>
<p>Breaking it down:</p>
<ul>
<li>the <code>inline</code> keyword means we won‚Äôt interfere with any coroutine state machine; the entire suspending invocation will occur in the <code>try {}</code> block</li>
<li><code>startTrace</code> just invokes FirebasePerformance, names the trace, and starts it.</li>
<li>we accept a <code>block: (Trace) -&gt; E</code>, so that the instrumented code can append information to the Trace, if needed</li>
<li>in the <code>finally</code> block, we stop the trace, and return value produced by block</li>
<li>any exceptions are propagated to the calling code, since there‚Äôs no <code>catch</code> defined</li>
</ul>
<p>Sweet; simple; and, most importantly, it works!</p>
<p>Let‚Äôs rewrite our first suspending function using our new toy:</p>
<pre><code class="language-kotlin">suspend fun myAsyncFunction() : Int {
    val result = 1 + 1
    delay(100L)   
    println(&quot;something to see here: $result&quot;)
    return result
}
</code></pre>
<p>becomes:</p>
<pre><code class="language-kotlin">suspend fun myAsyncFunction() : Int {
    return trace(&quot;some-other-trace&quot;) {
        val result = 1 + 1
        delay(100L)   
        println(&quot;something to see here: $result&quot;)
        return@trace result
    }
}
</code></pre>
<p>This is our solution! If you want to achieve this same result without nesting your method into a lambda, you can push it into a private function:</p>
<pre><code class="language-kotlin">suspend fun myAsyncFunction() {
    return trace(&quot;some-other-trace&quot;) { _myAsyncFunction() }
}

private suspend fun _myAsyncFunction() : Int {
    val result = 1 + 1
    delay(100L)   
    println(&quot;something to see here: $result&quot;)
    return result
}
</code></pre>
<p>The Firebase Performance Monitoring Console will now show the total time <code>myAsyncFunction</code> runs, including the time that any actual suspension takes üéâ</p>
<p>Happy coding!</p>
<h2 id="next-steps">Next Steps</h2>
<p>I‚Äôve filed a feature request with Firebase to augment <code>@AddTrace</code> to support suspending functions. Let‚Äôs see what happens, maybe this blog post will be obsolete in 6 months üëÄ</p>
<p><em>Thanks to <a href="https://twitter.com/Akshay_Chordiya">Akshay Chordiya</a> and <a href="https://twitter.com/CodingDoug">Doug Stevenson</a> for reviewing the early drafts!</em> üôèüèæ</p>
<h2 id="sources--extra-reading">Sources | Extra Reading</h2>
<ol>
<li>
<p>The suspend modifier - Under the hood: <a href="https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f">https://medium.com/androiddevelopers/the-suspend-modifier-under-the-hood-b7ce46af624f</a></p>
</li>
<li>
<p>Java Code to Byte Code - Part 2: <a href="https://blog.jamesdbloom.com/JavaCodeToByteCode_PartTwo.html#try_catch_finally">https://blog.jamesdbloom.com/JavaCodeToByteCode_PartTwo.html#try_catch_finally</a></p>
</li>
</ol>
]]></content>
        </item>
        
    </channel>
</rss>
