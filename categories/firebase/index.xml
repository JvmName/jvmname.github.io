<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firebase on @JvmName(&#34;Parth&#34;)</title>
    <link>https://jvmname.dev/categories/firebase/</link>
    <description>Recent content in Firebase on @JvmName(&#34;Parth&#34;)</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 29 Mar 2020 23:14:00 -0700</lastBuildDate>
    <atom:link href="https://jvmname.dev/categories/firebase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tracking Performance in Kotlin Suspending Functions</title>
      <link>https://jvmname.dev/posts/2020/03/tracking-performance-in-kotlin-suspending-functions/</link>
      <pubDate>Sun, 29 Mar 2020 23:14:00 -0700</pubDate>
      <guid>https://jvmname.dev/posts/2020/03/tracking-performance-in-kotlin-suspending-functions/</guid>
      <description>Suspended CupsChris Scott&#xA;Using Firebase Performance Monitoring to track the performance of a plain-ol’ function (Java or Kotlin) is drop-dead simple using the @AddTrace annotation: @AddTrace(&amp;#34;some-trace-name&amp;#34;) fun myBoringFunction() { println(&amp;#34;nothing to see here!&amp;#34;) }&#xA;Wait a few moments, and you’ll see some-trace-name in the Firebase Console!&#xA;But what if you want to track the performance of a suspend function? Unfortunately, this is not as straightforward.&#xA;Attempt #1: Suspending Disbelief Let’s say you have some uncomplicated suspending function, like so:</description>
    </item>
  </channel>
</rss>
